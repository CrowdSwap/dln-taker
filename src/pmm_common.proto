syntax = "proto3";

package pmm_common;

message U256 {
  fixed64 limb1 = 1;
  fixed64 limb2 = 2;
  fixed64 limb3 = 3;
  fixed64 limb4 = 4;
}

message Address {
  bytes address = 1;
}

message TokenMetadata {
  U256 chain_id       = 1;
  bytes token_address = 2;
  string name         = 3;
  string symbol       = 4;
  uint32 decimals     = 5;
}

message TransactionMetadata {
  bytes transaction_hash             = 1;
  bytes block_hash                   = 2;
  uint64 block_time                  = 3;
  uint64 block_number                = 4;
  uint64 tracked_by_reader_timestamp = 5;
  /// For each type of event
  /// For created order - maker
  /// for fulfill order - taker
  Address initiator                  = 6;
}

message Offer {
    U256 chain_id         = 1;
    Address token_address = 2;
    U256 amount           = 3;
}

message ExternalCallParams {
    U256 execution_fee           = 1;
    Address fallback_address_dst = 2;
    U256 hash_of_external_call   = 3;
    bytes external_call_data     = 4;
}

message Order {
    /// Unique nonce number for each maker
    /// Together with the maker, it forms the uniqueness for the order,
    /// which is important for calculating the order id
    uint64 maker_order_nonce = 1;
    /// Offer given on source chain
    Offer give = 2;
    /// Offer to take in destination chain
    Offer take = 3;
    /// Order maker address
    /// Address in source chain
    Address maker_src = 4;
    /// Address of receiver_dst of tokens in target chain
    /// or
    /// Address of external call executor if `external_call` presented
    Address receiver_dst = 5;
    /// Optional external call for automatically execution in target chain after execution of order
    ExternalCallParams external_call = 6;
    /// Address in source chain
    /// Can `patch_order_give`
    Address give_patch_authority_src = 7;
    /// Address in destination chain
    /// Can `send_order_cancel`, `process_fallback` and `patch_order_take`
    Address order_authority_address_dst = 8;
    /// Optional address in destination chain
    /// If the field is `Some`, then only this address can call `full_fill_order` with this
    /// order
    Address allowed_taker_dst = 9;
    /// Optional address in source chain
    /// If the field is `Some`, then only this address can receive cancel
    Address allowed_cancel_beneficiary_src = 10;
}

message AffiliateFee {
    Address beneficiary_src = 1;
    U256 amount             = 2;
}

message EventCreatedSrc {
  TransactionMetadata transaction_metadata = 1;
  TokenMetadata give_token_metadata        = 2;
  TokenMetadata take_token_metadata        = 3;
  Order created_order                      = 4;
  U256 order_id                            = 5;
  uint32 referral_code                     = 6;
  AffiliateFee affiliate_fee               = 7;
  U256 fix_fee                             = 8;
  U256 percent_fee                         = 9;
}

message EventFulfilledDst {
  TransactionMetadata transaction_metadata = 1;
  TokenMetadata give_token_metadata        = 2;
  TokenMetadata take_token_metadata        = 3;
  Order fulfilled_order                    = 4;
  U256 order_id                            = 5;
  Address taker_dst                        = 6;
}

message EventSentUnlockDst {
  TransactionMetadata transaction_metadata = 1;
  U256 order_id                            = 2;
  U256 submission_id                       = 3;
  Address unlock_beneficiary_src           = 4;
}

message EventOrderCancelledDst {
  TransactionMetadata transaction_metadata = 1;
  TokenMetadata give_token_metadata        = 2;
  TokenMetadata take_token_metadata        = 3;
  Order canceled_order                     = 4;
  U256 order_id                            = 5;
}

message EventSentOrderCancelDst {
  TransactionMetadata transaction_metadata = 1;
  U256 order_id                            = 2;
  U256 submission_id                       = 3;
  Address cancel_beneficiary_src           = 4;
}

message EventClaimedUnlockSrc {
  TransactionMetadata transaction_metadata = 1;
  U256 order_id                            = 2;
  U256 submission_id                       = 3;
  Address unlock_beneficiary_src           = 4;
}

message EventClaimedOrderCancelSrc {
  TransactionMetadata transaction_metadata = 1;
  U256 order_id                            = 2;
  U256 submission_id                       = 3;
  Address cancel_beneficiary_src           = 4;
}

message PmmEvent {
  oneof event {
    EventCreatedSrc created_src                         = 1;
    EventFulfilledDst fulfilled_dst                     = 2;
    EventSentUnlockDst send_unlock_dst                  = 3;
    EventOrderCancelledDst order_cancelled_dst          = 4;
    EventSentOrderCancelDst send_order_cancel_dst       = 5;
    EventClaimedUnlockSrc claimed_unlock_src            = 6;
    EventClaimedOrderCancelSrc claimed_order_cancel_src = 7;
  }
}